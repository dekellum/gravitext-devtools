#!/usr/bin/ruby
#--
# Copyright (c) 2008-2011 David Kellum
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You may
# obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.
#++

require 'fileutils'
require 'optparse'
require 'stringio'

require 'rubygems'
require 'rainbow'

class CleanWS
  include FileUtils

  class NullIO
    def puts(*a)
    end
  end

  CMAP = {}

  def self.mk_tag( name, color )
    tag = name.foreground( color )
    CMAP[ tag ] = color
    tag
  end

  CLEAN = mk_tag( "CLEAN", :green )
  DIRTY = mk_tag( "DIRTY", :red )
  WROTE = mk_tag( "WROTE", :red )
  FIXED = mk_tag( "FIXED", :yellow )
  NOTXT = mk_tag( "NOTXT", :blue )

  def initialize
    @do_write = false
    @verbose = false
    @show_clean = true
    @fout = NullIO.new
    @git_ls = false
    @log = $stdout
    @llines = 0
  end

  def parse_flags( args )
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: cleanws [-w | -t] file ..."
      opts.on( "-w", "--write", "Update file in place") do
        @do_write = true
      end
      opts.on( "-v", "--verbose",
               "Output filtered files and verbose logging.") do
        @fout = $stdout
        log = $stderr
        @verbose = true
      end
      opts.on( "-d", "--dirty", "Show dirty status only.") do
        @show_clean = false
      end
      opts.on( "-g", "--git-updates",
               "Get input files from modified/untracked git working tree" ) do
        @git_ls = "-m -o --exclude-standard"
      end
      opts.on( "-G", "--git-cached",
               "Get input files from tracked/cached git files" ) do
        @git_ls = "-c"
      end
    end
    opts.parse!( args )
  end

  def main( args )

    parse_flags( args )

    if @git_ls
      gcmd = [ 'git ls-files', @git_ls, args ].flatten.join(' ')
      @log.puts gcmd if @verbose
      args = IO.popen( gcmd ).readlines.map { |f| f.strip }
      args.reject! { |f| f =~ /\.ws(~|\.tmp)$/ }
    end

    args.sort!

    ftypes = check_file_types( args )

    any_dirty = false

    ftypes.each do |ifile, type|
      d = process( ifile, type )
      any_dirty ||= d
    end

    header if @llines > 20
    exit( any_dirty ? 1 : 0 )
  end

  def check_file_types( files )
    fmap = {}
    # 1: keep only regular files in fmap
    files.each do |f|
       if File.file?( f ) && ! File.symlink?( f )
         fmap[f] = :file
       end
    end

    # 2: Use UNIX 'file' command to test for text files
    unless fmap.empty?
      IO.popen( "file " + fmap.keys.join( ' ' ) ) do |outf|
        outf.each do |line|
          # <filename>:   <type string with /text/ or not>
          if line =~ /^(.+):(.+)$/
            fmap[ $1 ] = ( ( $2 =~ /text/ ) ? :text : :binary )
          end
        end
      end
    end

    fmap.sort
  end

  def header
    @log.puts( "%5s %4s %4s %4s %4s %s" %
               [ "", "WS", "BLNK", "TABS", "LINE", "FILE" ] )
  end

  def process( ifile, type )
    @log.puts( "CLEAN f: #{ifile} :::" ) if @verbose

    ofile = nil

    chg, blank, tabs, total =
      if type == :text
        ofile = ifile + ".ws.tmp"

        fout = @do_write ? open( ofile, 'w' ) : @fout

        result = open( ifile, 'r' ) do |fin|
          filter( fin, fout )
        end

        fout.close if @do_write
        result
      else
        [0,0,0,0]
      end

    change = ( ( chg + blank ) > 0 )
    dirty  = change || ( tabs > 0 )

    state = if dirty
              if @do_write
                ( tabs == 0 ) ? FIXED : WROTE
              else
                DIRTY
              end
            else
              ( type == :text ) ? CLEAN : NOTXT
            end

    if dirty || @show_clean
      header if @llines == 0
      @log.puts( "%s %4d %4d %4d %4d %s" %
                 [ state, chg, blank, tabs, total,
                   ifile.dup.foreground( CMAP[ state ] ) ] )
      @llines += 1
    end

    if @do_write && ofile
      if change
        cp( ifile, ifile + ".ws~", :preserve => true )
        cp( ofile, ifile )
      end
      rm( ofile )
    end
    dirty
  end

  # Filters files fin to fout
  # All whitespace at end of line is replaced with '\n'
  # Only one blank line allowed consecutively.
  # Last non-empty line is terminated with '\n'
  # No trailing additional lines in file.
  def filter( fin, fout )
    dropped_lines = 0
    changed_lines = 0
    tab_lines = 0
    empty_lines = 0
    total = 0
    while( line = fin.gets )
      total += 1
      lstr = line.rstrip

      changed_lines += 1 if ( line != ( lstr + "\n" ) )

      if lstr.empty?
        empty_lines += 1
      else
        if empty_lines > 0
          fout.puts
          dropped_lines += empty_lines - 1
          empty_lines = 0
        end
        tab_lines += 1 if lstr =~ /\t/
        # line.gsub!( /\t/, "    " )
        fout.puts lstr
      end
    end
    dropped_lines += empty_lines
    [ changed_lines, dropped_lines, tab_lines, total ]
  end

end

CleanWS.new.main( ARGV )
